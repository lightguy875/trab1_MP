        -:    0:Source:pilha.c
        -:    0:Graph:obj/pilha.gcno
        -:    0:Data:obj/pilha.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "../include/pilha.h"
        -:    4:
       40:    5:Pilha *create_stack(Pilha *p, int max_tam)
        -:    6:{
       40:    7:	if (!exists(p))
        -:    8:	{
       37:    9:		p = (Pilha *)malloc(sizeof(Pilha));
       37:   10:		p->valor = (Dado *)malloc(max_tam * sizeof(Dado));
       37:   11:		p->max_tam = max_tam;
       37:   12:		p->size = 0;
       37:   13:		return p;
        -:   14:	}
        -:   15:
        -:   16:	else
        -:   17:	{
        3:   18:		return p;
        -:   19:	}
        -:   20:}
        -:   21:
       22:   22:int push(Pilha *p, Dado elem)
        -:   23:{
       22:   24:	if (exists(p))
        -:   25:	{
       19:   26:		if (p->size < p->max_tam)
        -:   27:		{
       16:   28:			p->valor[p->size] = elem;
       16:   29:			p->size++;
       16:   30:			return 0;
        -:   31:		}
        -:   32:		else
        -:   33:		{
        -:   34:
        3:   35:			return -1;
        -:   36:		}
        -:   37:	}
        -:   38:
        -:   39:	else
        -:   40:	{
        -:   41:
        3:   42:		return -1;
        -:   43:	}
        -:   44:}
        -:   45:
       12:   46:int pop(Pilha *p, Dado *elemento)
        -:   47:{
        -:   48:
       12:   49:	if (exists(p))
        -:   50:	{
        -:   51:
        9:   52:		if (p->size == 0)
        6:   53:			return -1;
        3:   54:		p->size--;
        3:   55:		*elemento = p->valor[p->size];
        3:   56:		return 0;
        -:   57:	}
        -:   58:
        -:   59:	else
        -:   60:	{
        -:   61:
        3:   62:		return -1;
        -:   63:	}
        -:   64:}
        -:   65:
        6:   66:int empty(Pilha *p)
        -:   67:{
        -:   68:
        6:   69:	if (exists(p))
        -:   70:	{
        3:   71:		return (p->size == 0);
        -:   72:	}
        -:   73:
        -:   74:	else
        -:   75:	{
        3:   76:		return -1;
        -:   77:	}
        -:   78:}
        -:   79:
        6:   80:int print_pilha(Pilha *p)
        -:   81:{
        6:   82:	if (exists(p))
        -:   83:	{
        -:   84:
        6:   85:		for (int i = 0; i < p->size; ++i)
        -:   86:		{
        3:   87:			printf("\t\t%d\n", p->valor[i]);
        -:   88:		}
        3:   89:		return 0;
        -:   90:	}
        -:   91:
        -:   92:	else
        -:   93:	{
        3:   94:		return -1;
        -:   95:
        -:   96:	}
        -:   97:}
       24:   98:Pilha *free_stack(Pilha *p)
        -:   99:{
       24:  100:	if (exists(p))
        -:  101:	{
       21:  102:		free(p->valor);
       21:  103:		p->valor = NULL;
       21:  104:		free(p);
       21:  105:		p = NULL;
       21:  106:		return p;
        -:  107:	}
        -:  108:
        -:  109:	else
        -:  110:	{
        -:  111:
        3:  112:		return p;
        -:  113:	}
        -:  114:}
        3:  115:int tamanho(Pilha *p)
        -:  116:{
        3:  117:	if (exists(p))
        -:  118:	{
        2:  119:		return p->size;
        -:  120:	}
        -:  121:
        -:  122:	else
        -:  123:	{
        -:  124:
        1:  125:		return -1;
        -:  126:	}
        -:  127:}
        3:  128:int isFULL(Pilha *p)
        -:  129:{
        3:  130:	if (exists(p))
        -:  131:	{
        -:  132:
        3:  133:		return (p->size == p->max_tam);
        -:  134:	}
        -:  135:
        -:  136:	else
        -:  137:	{
        -:  138:
    #####:  139:		return -1;
        -:  140:	}
        -:  141:}
      143:  142:int exists(Pilha *p)
        -:  143:{
      143:  144:	if (p == NULL)
        -:  145:	{
       68:  146:		return 0;
        -:  147:	}
        -:  148:
        -:  149:	else
        -:  150:	{
       75:  151:		return 1;
        -:  152:	}
        -:  153:}
        6:  154:int top(Pilha *p, Dado *elemento)
        -:  155:{
        6:  156:	if (exists(p))
        -:  157:	{
        -:  158:
        3:  159:		if (p->size == 0)
    #####:  160:			return -1;
        3:  161:		*elemento = p->valor[p->size - 1];
        3:  162:		return 0;
        -:  163:	}
        -:  164:
        -:  165:	else
        -:  166:	{
        -:  167:
        3:  168:		return -1;
        -:  169:	}
        -:  170:}
        6:  171:Pilha *set_size(Pilha *p, int tam)
        -:  172:{
        6:  173:	if (exists(p) && tam > p->size)
        -:  174:	{
        -:  175:
        3:  176:		p->max_tam = tam;
        3:  177:		return p;
        -:  178:	}
        -:  179:
        -:  180:	else
        -:  181:	{
        3:  182:		return p;
        -:  183:	}
        -:  184:}
