        -:    0:Source:pilha.c
        -:    0:Graph:obj/pilha.gcno
        -:    0:Data:obj/pilha.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @brief Arquivo de funções
        -:    3: * 
        -:    4: * @file pilha.c
        -:    5: * @author Luís Eduardo
        -:    6: * @date 2018-09-13
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "../include/pilha.h"
        -:   12:/**
        -:   13: * @brief 
        -:   14: * 
        -:   15: * @param p 
        -:   16: * @param max_tam 
        -:   17: * @return Pilha* 
        -:   18: */
       16:   19:Pilha *create_stack(Pilha *p, int max_tam)
        -:   20:{
       16:   21:	if (!exists(p))
        -:   22:	{
       15:   23:		p = (Pilha *)malloc(sizeof(Pilha));
       15:   24:		p->valor = (Dado *)malloc(max_tam * sizeof(Dado));
       15:   25:		p->max_tam = max_tam;
       15:   26:		p->size = 0;
       15:   27:		return p;
        -:   28:	}
        -:   29:
        -:   30:	else
        -:   31:	{
        1:   32:		return p;
        -:   33:	}
        -:   34:}
        -:   35:/**
        -:   36: * @brief 
        -:   37: * 
        -:   38: * @param p 
        -:   39: * @param elem 
        -:   40: * @return int 
        -:   41: */
        -:   42:
       13:   43:int push(Pilha *p, Dado elem)
        -:   44:{
       13:   45:	if (exists(p))
        -:   46:	{
       12:   47:		if (p->size < p->max_tam)
        -:   48:		{
       11:   49:			p->valor[p->size] = elem;
       11:   50:			p->size++;
       11:   51:			return 0;
        -:   52:		}
        -:   53:		else
        -:   54:		{
        -:   55:
        1:   56:			return -1;
        -:   57:		}
        -:   58:	}
        -:   59:
        -:   60:	else
        -:   61:	{
        -:   62:
        1:   63:		return -1;
        -:   64:	}
        -:   65:}
        -:   66:/**
        -:   67: * @brief 
        -:   68: * 
        -:   69: * @param p 
        -:   70: * @param elemento 
        -:   71: * @return int 
        -:   72: */
        4:   73:int pop(Pilha *p, Dado *elemento)
        -:   74:{
        -:   75:
        4:   76:	if (exists(p))
        -:   77:	{
        -:   78:
        3:   79:		if (p->size == 0)
        2:   80:			return -1;
        1:   81:		p->size--;
        1:   82:		*elemento = p->valor[p->size];
        1:   83:		return 0;
        -:   84:	}
        -:   85:
        -:   86:	else
        -:   87:	{
        -:   88:
        1:   89:		return -1;
        -:   90:	}
        -:   91:}
        -:   92:/**
        -:   93: * @brief 
        -:   94: * 
        -:   95: * @param p 
        -:   96: * @return int 
        -:   97: */
        2:   98:int empty(Pilha *p)
        -:   99:{
        -:  100:
        2:  101:	if (exists(p))
        -:  102:	{
        1:  103:		return (p->size == 0);
        -:  104:	}
        -:  105:
        -:  106:	else
        -:  107:	{
        1:  108:		return -1;
        -:  109:	}
        -:  110:}
        -:  111:/**
        -:  112: * @brief 
        -:  113: * 
        -:  114: * @param p 
        -:  115: * @return int 
        -:  116: */
        2:  117:int print_pilha(Pilha *p)
        -:  118:{
        2:  119:	if (exists(p))
        -:  120:	{
        -:  121:
        2:  122:		for (int i = 0; i < p->size; ++i)
        -:  123:		{
        1:  124:			printf("\t\t%d\n", p->valor[i]);
        -:  125:		}
        1:  126:		return 0;
        -:  127:	}
        -:  128:
        -:  129:	else
        -:  130:	{
        1:  131:		return -1;
        -:  132:	}
        -:  133:}
        -:  134:/**
        -:  135: * @brief 
        -:  136: * 
        -:  137: * @param p 
        -:  138: * @return Pilha* 
        -:  139: */
        8:  140:Pilha *free_stack(Pilha *p)
        -:  141:{
        8:  142:	if (exists(p))
        -:  143:	{
        7:  144:		free(p->valor);
        7:  145:		p->valor = NULL;
        7:  146:		free(p);
        7:  147:		p = NULL;
        7:  148:		return p;
        -:  149:	}
        -:  150:
        -:  151:	else
        -:  152:	{
        -:  153:
        1:  154:		return p;
        -:  155:	}
        -:  156:}
        -:  157:/**
        -:  158: * @brief 
        -:  159: * 
        -:  160: * @param p 
        -:  161: * @return int 
        -:  162: */
        4:  163:int tamanho(Pilha *p)
        -:  164:{
        4:  165:	if (exists(p))
        -:  166:	{
        3:  167:		return p->size;
        -:  168:	}
        -:  169:
        -:  170:	else
        -:  171:	{
        -:  172:
        1:  173:		return -1;
        -:  174:	}
        -:  175:}
        -:  176:/**
        -:  177: * @brief 
        -:  178: * 
        -:  179: * @param p 
        -:  180: * @return int 
        -:  181: */
        1:  182:int isFULL(Pilha *p)
        -:  183:{
        1:  184:	if (exists(p))
        -:  185:	{
        -:  186:
        1:  187:		return (p->size == p->max_tam);
        -:  188:	}
        -:  189:
        -:  190:	else
        -:  191:	{
        -:  192:
    #####:  193:		return -1;
        -:  194:	}
        -:  195:}
        -:  196:/**
        -:  197: * @brief 
        -:  198: * 
        -:  199: * @param p 
        -:  200: * @return int 
        -:  201: */
       62:  202:int exists(Pilha *p)
        -:  203:{
       62:  204:	if (p == NULL)
        -:  205:	{
       26:  206:		return 0;
        -:  207:	}
        -:  208:
        -:  209:	else
        -:  210:	{
       36:  211:		return 1;
        -:  212:	}
        -:  213:}
        -:  214:/**
        -:  215: * @brief 
        -:  216: * 
        -:  217: * @param p 
        -:  218: * @param elemento 
        -:  219: * @return int 
        -:  220: */
        3:  221:int top(Pilha *p, Dado *elemento)
        -:  222:{
        3:  223:	if (exists(p))
        -:  224:	{
        -:  225:
        2:  226:		if (p->size == 0)
    #####:  227:			return -1;
        2:  228:		*elemento = p->valor[p->size - 1];
        2:  229:		return 0;
        -:  230:	}
        -:  231:
        -:  232:	else
        -:  233:	{
        -:  234:
        1:  235:		return -1;
        -:  236:	}
        -:  237:}
        -:  238:/**
        -:  239: * @brief 
        -:  240: * 
        -:  241: * @param p 
        -:  242: * @param tam 
        -:  243: * @return Pilha* 
        -:  244: */
        4:  245:Pilha *set_size(Pilha *p, int tam)
        -:  246:{
        4:  247:	if (exists(p) && tam > p->size)
        -:  248:	{
        2:  249:		p->valor = (Dado *) realloc(p->valor,tam);
        2:  250:		p->max_tam = tam;
        2:  251:		return p;
        -:  252:	}
        -:  253:
        -:  254:	else
        -:  255:	{
        2:  256:		return p;
        -:  257:	}
        -:  258:}
