        -:    0:Source:pilha.c
        -:    0:Graph:obj/pilha.gcno
        -:    0:Data:obj/pilha.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:/**
        -:    2: * @brief Arquivo de implementação das funções
        -:    3: * 
        -:    4: * @file pilha.c
        -:    5: * @author Luís Eduardo
        -:    6: * @date 2018-09-13
        -:    7: */
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include "../include/pilha.h"
        -:   11:/**
        -:   12: * @brief Aloca memória para a pilha
        -:   13: * 
        -:   14: * @param p 
        -:   15: * @param max_tam 
        -:   16: * @return Pilha* 
        -:   17: */
       26:   18:Pilha *create_stack(Pilha *p, int max_tam)
        -:   19:{
       26:   20:	if (!exists(p))
        -:   21:	{
       26:   22:		p = (Pilha *)malloc(sizeof(Pilha));
       26:   23:		p->inicio = NULL;
       26:   24:		p->max = max_tam;
       26:   25:		p->size = 0;
       26:   26:		return p;
        -:   27:	}
        -:   28:	else
        -:   29:	{
    #####:   30:		return p;
        -:   31:	}
        -:   32:}
        -:   33:/**
        -:   34: * @brief Adiciona um dado para a pilha
        -:   35: * 
        -:   36: * @param p 
        -:   37: * @param elem 
        -:   38: * @return int 
        -:   39: */
       30:   40:int push(Pilha *p, Dado elem)
        -:   41:{
       30:   42:	if (exists(p))
        -:   43:	{
       26:   44:		if (p->size < p->max)
        -:   45:		{
        -:   46:			Elemento *novo_elemento;
       24:   47:			if ((novo_elemento = (Elemento *)malloc(sizeof(Elemento))) == NULL)
    #####:   48:				return -1;
       24:   49:			novo_elemento->pedaco = elem;
       24:   50:			novo_elemento->next = p->inicio;
       24:   51:			p->inicio = novo_elemento;
       24:   52:			p->size++;
       24:   53:			return 0;
        -:   54:		}
        -:   55:		else
        -:   56:		{
        2:   57:			return -1;
        -:   58:		}
        -:   59:	}
        -:   60:
        -:   61:	else
        -:   62:	{
        4:   63:		return -1;
        -:   64:	}
        -:   65:}
        -:   66:/**
        -:   67: * @brief Retorna elemento do topo da pilha
        -:   68: * 
        -:   69: * @param p 
        -:   70: * @param elem 
        -:   71: * @return int 
        -:   72: */
       10:   73:int top(Pilha *p, Dado *elem)
        -:   74:{
       10:   75:	if (exists(p))
        -:   76:	{
        -:   77:		Elemento *a;
        4:   78:		a = p->inicio;
        4:   79:		*elem = a->pedaco;
        4:   80:		return 0;
        -:   81:	}
        -:   82:
        -:   83:	else
        -:   84:	{
        6:   85:		return -1;
        -:   86:	}
        -:   87:}
        -:   88:/**
        -:   89: * @brief retira ultimo elemento da pilha
        -:   90: * 
        -:   91: * @param p 
        -:   92: * @return int 
        -:   93: */
        6:   94:int pop(Pilha *p)
        -:   95:{
        6:   96:	if (exists(p))
        -:   97:	{
        -:   98:		Elemento *remov_elemento;
        4:   99:		if (p->size == 0)
        2:  100:			return -1;
        2:  101:		remov_elemento = p->inicio;
        2:  102:		p->inicio = p->inicio->next;
        2:  103:		free(remov_elemento);
        2:  104:		p->size--;
        2:  105:		return 0;
        -:  106:	}
        -:  107:
        -:  108:	else
        -:  109:	{
        2:  110:		return -1;
        -:  111:	}
        -:  112:}
        -:  113:/**
        -:  114: * @brief Verifica se a pilha está vazia
        -:  115: * 
        -:  116: * @param p 
        -:  117: * @return int 
        -:  118: */
        6:  119:int empty(Pilha *p)
        -:  120:{
        6:  121:	if (exists(p))
        -:  122:	{
        4:  123:		return (p->inicio == NULL);
        -:  124:	}
        -:  125:
        -:  126:	else
        -:  127:	{
        2:  128:		return -1;
        -:  129:	}
        -:  130:}
        -:  131:/**
        -:  132: * @brief Printa toda a pilha
        -:  133: * 
        -:  134: * @param p 
        -:  135: * @return int 
        -:  136: */
        4:  137:int print_pilha(Pilha *p)
        -:  138:{
        4:  139:	if (exists(p))
        -:  140:	{
        -:  141:
        -:  142:		Elemento *corrente;
        -:  143:		int i;
        2:  144:		corrente = p->inicio;
        4:  145:		for (i = 0; i < p->size; ++i)
        -:  146:		{
        2:  147:			printf("\t\t%i\n", corrente->pedaco);
        2:  148:			corrente = corrente->next;
        -:  149:		}
        2:  150:		return 0;
        -:  151:	}
        -:  152:
        -:  153:	else
        -:  154:	{
        2:  155:		return -1;
        -:  156:	}
        -:  157:}
        -:  158:/**
        -:  159: * @brief Apaga a pilha da memória
        -:  160: * 
        -:  161: * @param p 
        -:  162: * @return Pilha* 
        -:  163: */
        8:  164:Pilha *free_stack(Pilha *p)
        -:  165:{
        8:  166:	if (exists(p))
        -:  167:	{
        4:  168:		Elemento *temp = p->inicio;
        -:  169:		Elemento *temp2;
       4*:  170:		while (temp != NULL)
        -:  171:		{
        -:  172:
    #####:  173:			temp2 = temp->next;
    #####:  174:			free(temp); /*desalocando os nos*/
    #####:  175:			temp = NULL;
    #####:  176:			temp = temp2;
        -:  177:		}
        4:  178:		free(p); /*desalocando a pilha*/
        4:  179:		p = NULL;
        4:  180:		return p;
        -:  181:	}
        -:  182:
        -:  183:	else
        -:  184:	{
        4:  185:		return p;
        -:  186:	}
        -:  187:}
        -:  188:/**
        -:  189: * @brief Retorna o tamanho atual da pilha
        -:  190: * 
        -:  191: * @param p 
        -:  192: * @return int 
        -:  193: */
        6:  194:int tamanho(Pilha *p)
        -:  195:{
        6:  196:	if (exists(p))
        -:  197:	{
        4:  198:		return p->size;
        -:  199:	}
        -:  200:
        -:  201:	else
        -:  202:	{
        2:  203:		return -1;
        -:  204:	}
        -:  205:}
        -:  206:/**
        -:  207: * @brief Verifica se a pilha atingiu o tamanho máximo
        -:  208: * 
        -:  209: * @param p 
        -:  210: * @return int 
        -:  211: */
        6:  212:int isFULL(Pilha *p)
        -:  213:{
        6:  214:	if (exists(p))
        -:  215:	{
        -:  216:
        2:  217:		return (p->size == p->max);
        -:  218:	}
        -:  219:
        -:  220:	else
        -:  221:	{
        4:  222:		return -1;
        -:  223:	}
        -:  224:}
        -:  225:/**
        -:  226: * @brief Verifica se a pilha foi alocada
        -:  227: * Nesse caso se ela existe
        -:  228: * @param p 
        -:  229: * @return int 
        -:  230: */
      118:  231:int exists(Pilha *p)
        -:  232:{
      118:  233:	if (p == NULL)
        -:  234:	{
       60:  235:		return 0;
        -:  236:	}
        -:  237:
        -:  238:	else
        -:  239:	{
       58:  240:		return 1;
        -:  241:	}
        -:  242:}
        -:  243:/**
        -:  244: * @brief Redefine o tamanho da pilha
        -:  245: * 
        -:  246: * @param p 
        -:  247: * @param tam 
        -:  248: * @return Pilha* 
        -:  249: */
        8:  250:Pilha *set_size(Pilha *p, int tam)
        -:  251:{
        8:  252:	if ((exists(p)) && (p->max < tam))
        -:  253:	{
        -:  254:	
        4:  255:		p->max = tam;
        4:  256:		return p;
        -:  257:		
        -:  258:	}
        -:  259:	else
        -:  260:	{
        4:  261:		return p;
        -:  262:	}
        -:  263:}
